if (!ORYX.Plugins)     ORYX.Plugins = new Object();//ActorsEditor and GroupsEditorORYX.Plugins.TaskEditor = Clazz.extend({        construct: function(facade){        this.facade = facade;		var TE=ORYX.Plugins.TaskEditor;        ORYX.FieldEditors["actor"] = new TE.ActorsEditorFactory();        ORYX.FieldEditors["group"] = new TE.GroupsEditorFactory();        //ORYX.FieldEditors["group2"] = new TE.GroupsEditor2Factory();        //ORYX.FieldEditors["bussiness"] = new TE.BusinessResEditorFactory();        ORYX.FieldEditors["bussiness"] = new TE.BusinessResTreeEditorFactory();        ORYX.FieldEditors["brdatainput"] = new TE.BRDataInputEditorFactory();        ORYX.FieldEditors["brdataoutput"] = new TE.BRDataOutputEditorFactory();        ORYX.FieldEditors["jacondition"] = new TE.JAConditionEditorFactory();				var props=[			'name',			'documentation',			'bgcolor',			'bordercolor',			'fontcolor',			'fontsize',			'tasktype',			'kj_jointapproval',						'activitytype',			'taskname',			'priority',			'kj_businessform',			'actors',			'groupid',						'kj_interface',			'kj_operation',			'kj_content',			'kj_contenttype',						'datainputset',			'dataoutputset',			'input_assignments',			'output_assignments',						'kj_approveopinion',			'kj_jacondition',						'onentryactions',			'onexitactions',			'script',			'script_language',						'content',			'operation',			'interface',			'ruleflowgroup',			'notifications',			'comment'		];		var propsMap={};		for(var i=0;i<props.length;i++){			propsMap[props[i]]=i+1;		}		if(!ORYX.propertiesOrder){			ORYX.propertiesOrder={};		}		ORYX.propertiesOrder['Task']=propsMap;		ORYX.propertiesOrder['type:node']=propsMap;    }});/**** ActorsEditor ****/ORYX.Plugins.TaskEditor.ActorsEditorFactory = Clazz.extend({    construct: function(){    },	    init: function(){		ORYX.Log.debug("init ActorsEditor");        var key = arguments[0];        var pair = arguments[1];        var index = arguments[3];		var bdl=ORYX.getBussinessDataLoader();		var tfDataSource=null;		var dataSourceCallback=null;				try{tfDataSource=bdl.setupActorsDataStore();}catch(e){ORYX.Log.debug("setupActorsDataStore failed",e);}				var propertyDataStore=this.dataSource;		if(ORYX.CONFIG.ACTORS_BY_BUSINESS_FORM){			dataSourceCallback=function(){				var businessformId=findBusinessformId(propertyDataStore);				if(!businessformId){					return null;				}				return bdl.loadActorsDataStore(businessformId);			}.bind(this);		}		                var tf = new Ext.form.DicPopupEditor({				allowBlank: pair.optional(),				grid:this.grid,				row:index,				facade:this.facade,				dataSource : tfDataSource,				dataSourceCallback : dataSourceCallback,				autoCreate : false,				windowTitle: ORYX.I18N.PropertyWindow.Task.selectActorsTitle        });		tf.columnModel = new Ext.grid.ColumnModel([			new Ext.grid.CheckboxSelectionModel(),			{id:'id', header: "ID", width: 60, sortable: true, dataIndex: 'id'},			{header: ORYX.I18N.PropertyWindow.Editor.UserNameHeader, width: 90, sortable: true, dataIndex: 'name'}		 ]);				tf.on('dialogClosed', this.dialogClosed2, {scope:this, row:index, col:1, field:tf});				pair.labelProvider=function(){			return pair;		};		ORYX.LabelProviders[pair]=this.buildMultiValueLabelProvider(tf);				var editor=new Ext.Editor(tf);		editor.valueTooltip=this.buildMultiValueTooltip(tf,key);		        return editor;    }});/**** GroupsEditor ****/ORYX.Plugins.TaskEditor.GroupsEditorFactory = Clazz.extend({    construct: function(){    },	    init: function(){		ORYX.Log.debug("init GroupsEditor");        var key = arguments[0];        var pair = arguments[1];        var index = arguments[3];		var bdl=ORYX.getBussinessDataLoader();		var tfDataSource=null;		var dataSourceCallback=null;				try{tfDataSource=bdl.setupGroupsDataStore();}catch(e){ORYX.Log.debug("setupGroupsDataStore failed",e);}				var propertyDataStore=this.dataSource;		if(ORYX.CONFIG.ACTORS_BY_BUSINESS_FORM){			dataSourceCallback=function(){				var businessformId=findBusinessformId(propertyDataStore);				if(!businessformId){					return null;				}				return bdl.loadGroupsDataStore(businessformId);			}.bind(this);		}                var tf = new Ext.form.DicPopupEditor({				allowBlank: pair.optional(),				grid:this.grid,				row:index,				facade:this.facade,				dataSource : tfDataSource,				dataSourceCallback : dataSourceCallback,				autoCreate : false,				windowTitle: ORYX.I18N.PropertyWindow.Task.selectGroupsTitle        });		tf.columnModel = new Ext.grid.ColumnModel([			new Ext.grid.CheckboxSelectionModel(),			{id:'id', header: "ID", width: 60, sortable: true, dataIndex: 'id'},			{header: ORYX.I18N.PropertyWindow.Editor.NameHeader, width: 90, sortable: true, dataIndex: 'name'}		 ]);				tf.on('dialogClosed', this.dialogClosed2, {scope:this, row:index, col:1, field:tf});				pair.labelProvider=function(){			return pair;		};		ORYX.LabelProviders[pair]=this.buildMultiValueLabelProvider(tf);				var editor=new Ext.Editor(tf);		editor.valueTooltip=this.buildMultiValueTooltip(tf,key);		        return editor;    }});/**** GroupsEditor2 ****/ORYX.Plugins.TaskEditor.GroupsEditor2Factory = Clazz.extend({    construct: function(){    },	    init: function(){		ORYX.Log.debug("init GroupsEditor2");        var key = arguments[0];        var pair = arguments[1];        var index = arguments[3];		var bdl=ORYX.getBussinessDataLoader();		var tfDataSource=bdl.setupGroupsDataStore();				var tf = new Ext.form.MultiSelectField({			allowBlank: pair.optional(),			grid:this.grid,			row:index,			facade:this.facade,			dataSource : tfDataSource,			autoCreate : false,			typeAhead: true,			hiddenName:'groups'		});				pair.labelProvider=function(){			return pair;		};		ORYX.LabelProviders[pair]=this.buildMultiValueLabelProvider(tf);				var editor=new Ext.Editor(tf);		editor.valueTooltip=this.buildMultiValueTooltip(tf,key);		        return editor;    }});/**** BussinessRes ****/ORYX.Plugins.TaskEditor.BusinessResEditorFactory = Clazz.extend({    construct: function(){    },	    init: function(){		ORYX.Log.debug("init BusinessResEditor");        var key = arguments[0];        var pair = arguments[1];        var index = arguments[3];		var bdl=ORYX.getBussinessDataLoader();		var store = bdl.loadBussinessRes();				var displayField='name';		var valueField='id';		var field = new Ext.form.ComboBox({			editable: false,			//tpl: '<tpl for="."><div class="x-combo-list-item">{[(values.icon) ? "<img src=\'" + values.icon + "\' />" : ""]} {values.name}</div></tpl>',			store: store,			displayField:displayField,			valueField: valueField,			typeAhead: true,			mode: 'local',			triggerAction: 'all',			selectOnFocus:true		});		field.on('select', function(combo, record, index) {			this.editDirectly(key, combo.getValue());		}.bind(this));				pair.labelProvider=function(){			return pair;		};		ORYX.LabelProviders[pair]=function(pair){			return function(value){				if(!value){					return "";				}				var record=field.store.query(valueField, value).items[0];				if(record){					return record.data[displayField];				}				return "";			};		};				return new Ext.Editor(field);    }});ORYX.Plugins.TaskEditor.BusinessResTreeEditorFactory = Clazz.extend({    construct: function(){    },	    init: function(){		ORYX.Log.debug("init BusinessResTreeEditorFactory");        var key = arguments[0];        var pair = arguments[1];        var index = arguments[3];				var bdl = ORYX.getBussinessDataLoader();		var formStore = bdl.loadBussinessResTree();				var displayField='name';		var valueField='id';				var field = new Ext.form.TreePopupEditor({			allowBlank: pair.optional(),			dataSource: formStore,			grid: this.grid,			row: index,			facade: this.facade,			windowTitle: ORYX.I18N.PropertyWindow.Editor.BussinessForm		});				field.on('dialogClosed', this.dialogClosed2, {scope:this, row:index, col:1, field:field});				pair.labelProvider=function(){			return pair;		};		ORYX.LabelProviders[pair]=function(pair){			return function(value){				if(!value){					return "";				}				var record=field.dataSource.query(valueField, value).items[0];				if(record){					return record.data[displayField];				}				return "";			};		};				return new Ext.Editor(field);    }});/**** ComplexDataInput ****/Ext.form.BRIO_Editor = Ext.extend(Ext.form.NameTypeEditor,  {	 tbarConfigCallback : function(){		return [{			text: ORYX.I18N.PropertyWindow.Editor.SelectBussinessFields,			handler : function(){				var ioDataStore=this.vardefsGrid.store;				var businessformId=findBusinessformId(this.dataSource);				if(!businessformId){					return;				}				var bdl=ORYX.getBussinessDataLoader();				var resFieldsDataStore = bdl.loadBussinessResFields(businessformId);								var resFieldsColumnModel = new Ext.grid.ColumnModel([					new Ext.grid.CheckboxSelectionModel(),					{id:'name', header: ORYX.I18N.PropertyWindow.Editor.NameHeader, width: 60, sortable: true, dataIndex: 'name'},					{header: ORYX.I18N.PropertyWindow.Editor.TypeHeader, width: 40, sortable: true, dataIndex: 'type',  renderer: function(type){							var types=this._typesData;							for(var i=0;i<types.length;i++){								if(types[i][0]===type){									return types[i][1];								}							}							return type;						}.bind(this)					},					{header: ORYX.I18N.PropertyWindow.Editor.DescriptionHeader, width: 120, sortable: true, dataIndex: 'descr'}				 ]);								var businessformName=businessformId;				var bfRecord=findBusinessformRecord(this.dataSource);				if(bfRecord!=null){					var bfEditor=bfRecord.get('gridProperties').editor;					if(bfEditor){						var bfOptionStore=bfEditor.field.store||bfEditor.field.dataSource;						var bfOptionRecord = bfOptionStore.query('id', businessformId).items[0];						if(bfOptionRecord){							businessformName=bfOptionRecord.get('name');						}					}				}								var igrid = new Ext.grid.GridPanel({					store: resFieldsDataStore,					cm: resFieldsColumnModel,					sm: new Ext.grid.CheckboxSelectionModel(),					viewConfig: {						forceFit:true					},					autoHeight:true,					frame:false,					border:false,					iconCls:'icon-grid'				});								var dialog = new Ext.Window({					layout		: 'anchor',					autoCreate	: true,					title		: ORYX.I18N.PropertyWindow.Editor.BussinessForm + businessformName,					height		: 250,					width		: 350,					y			: ORYX.CONFIG.EXT_WINDOW_Y,					modal		: true,					collapsible	: false,					fixedcenter	: true,					shadow		: true,					resizable   : true,					proxyDrag	: true,					autoScroll  : true,					items		:[igrid],					listeners	:{},					buttons		: [{						text: ORYX.I18N.PropertyWindow.ok,						handler: function(){							igrid.stopEditing();							igrid.getView().refresh();							var selModel=igrid.getSelectionModel();							resFieldsDataStore.each(function(record){								var name=record.get('name');								var ioRecord = ioDataStore.query('name', name).items[0];								if(selModel.isSelected(record)){									if(!ioRecord){										ioDataStore.add(new this.VarDef({											name: name,											stype: record.get('type'),											ctype: ''										}));									}								}else{									if(ioRecord){										ioDataStore.remove(ioRecord);									}								}							}.bind(this));							dialog.hide();						}.bind(this)					}, {						text: ORYX.I18N.PropertyWindow.cancel,						handler: function(){							//this.setValue(this.value);							dialog.hide();						}.bind(this)					}]				});				dialog.show();								var currentNames=ioDataStore.collect('name');				var selRecords=[];				resFieldsDataStore.each(function(record){					if(currentNames.indexOf(record.get('name'))>=0){						selRecords.push(record);					}				});				var selModel=igrid.getSelectionModel();				selModel.selectRecords(selRecords,false);							}.bind(this)		}]	}});Ext.form.BRDataInputField = Ext.extend(Ext.form.BRIO_Editor,  {     windowTitle : ORYX.I18N.PropertyWindow.Editor.ForDataInput,     addButtonLabel : ORYX.I18N.PropertyWindow.Editor.AddDataInput});ORYX.Plugins.TaskEditor.BRDataInputEditorFactory = Clazz.extend({    construct: function(){    },	    init: function(){		ORYX.Log.debug("init BRDataInputEditor");        var key = arguments[0];        var pair = arguments[1];        var index = arguments[3];		var tf = new Ext.form.BRDataInputField({			allowBlank: pair.optional(),			dataSource:this.dataSource,			grid:this.grid,			row:index,			facade:this.facade		});				tf.on('dialogClosed', this.dialogClosed2, {scope:this, row:index, col:1, field:tf});				var editor=new Ext.Editor(tf);		editor.valueTooltip=tf.buildNameTypeTooltip(tf,key);				return editor;    }});Ext.form.BRDataOutputField = Ext.extend(Ext.form.BRIO_Editor,  {     windowTitle : ORYX.I18N.PropertyWindow.Editor.ForDataOutput,     addButtonLabel : ORYX.I18N.PropertyWindow.Editor.AddDataOutput});ORYX.Plugins.TaskEditor.BRDataOutputEditorFactory = Clazz.extend({    construct: function(){    },	    init: function(){		ORYX.Log.debug("init BRDataOutputEditor");        var key = arguments[0];        var pair = arguments[1];        var index = arguments[3];		var tf = new Ext.form.BRDataOutputField({			allowBlank: pair.optional(),			dataSource:this.dataSource,			grid:this.grid,			row:index,			facade:this.facade		});				tf.on('dialogClosed', this.dialogClosed2, {scope:this, row:index, col:1, field:tf});				var editor=new Ext.Editor(tf);		editor.valueTooltip=tf.buildNameTypeTooltip(tf,key);				return editor;    }});/* JAConditionEditor */Ext.form.JAConditionField = Ext.extend(Ext.form.TriggerField,  {    onTriggerClick : function(){        if(this.disabled){            return;        }				var jacPercent=new Ext.form.NumberField({			allowNegative: false,			width: 90,			minValue: 0,			maxValue: 100,			minText: '',			maxText: ORYX.I18N.PropertyWindow.Editor.JAConditionPercentMaxText,			style:'margin:3px;'		});		var jacUcount=new Ext.form.NumberField({			allowDecimals: false,			allowNegative: false,			width: 90,			minValue: 0,			minText: '',			maxText: '',			style:'margin:3px;'		});		var percentRadio=new Ext.form.Radio({			name: 'jacr',			value: 'percent',			style:'margin:3px;',			boxLabel: ORYX.I18N.PropertyWindow.Editor.JAConditionPercent,			listeners: {				check: function(radio,checked){					if(checked){						jacPercent.enable();						jacUcount.disable();					}else{						jacUcount.enable();						jacPercent.disable();					}				}			}		});		var ucountRadio=new Ext.form.Radio({			name: 'jacr',			value: 'ucount',			style:'margin:3px;',			boxLabel: ORYX.I18N.PropertyWindow.Editor.JAConditionUsercount		});		var fpanel=new Ext.Panel({			layout	: 'table',			layoutConfig:{columns:3},			items: [				percentRadio,				jacPercent,				{html: '%', style:'margin:3px;'},				ucountRadio,				jacUcount,				{html: ORYX.I18N.PropertyWindow.Editor.JAConditionUsercountU, style:'margin:3px;'}			]		});				var dialog = new Ext.Window({			layout		: 'anchor',			autoCreate	: true,			title		: ORYX.I18N.PropertyWindow.Editor.JAConditionTitle,			height		: 160,			width		: 250,			y			: ORYX.CONFIG.EXT_WINDOW_Y,			modal		: true,			collapsible	: false,			fixedcenter	: true,			shadow		: true,			resizable   : true,			proxyDrag	: true,			autoScroll  : true,			items : [ fpanel ],			keys:[{				key	: 27,				fn	: function(){						dialog.hide()				}.bind(this)			}],			listeners	:{				hide: function(){					this.fireEvent('dialogClosed', this.value);					//this.focus.defer(10, this);					dialog.destroy();				}.bind(this)			},			buttons		: [{                text: ORYX.I18N.PropertyWindow.ok,                handler: function(){					var outValue='';					if(!jacPercent.disabled){						var pv=jacPercent.getValue();						if(pv){							outValue=pv+'%';						}else{							outValue='';						}					}else{						outValue=jacUcount.getValue();					}					this.setValue(outValue);					this.dataSource.getAt(this.row).set('value', outValue);					this.dataSource.commitChanges();					dialog.hide();				}.bind(this)            }, {                text: ORYX.I18N.PropertyWindow.cancel,                handler: function(){					this.setValue(this.value);                	dialog.hide();                }.bind(this)            }]		});		dialog.show();				var tv=this.getValue();		if(!tv || tv.length==0){			jacUcount.disable();			jacPercent.setValue(100);			percentRadio.setValue(true);		}else if(tv.charAt(tv.length-1)=='%'){			jacPercent.setValue(tv.substr(0,tv.length-1));			jacUcount.disable();			percentRadio.setValue(true);		}else{			jacUcount.setValue(tv);			jacPercent.disable();			ucountRadio.setValue(true);		}	}});ORYX.Plugins.TaskEditor.JAConditionEditorFactory = Clazz.extend({    construct: function(){    },	    init: function(){		ORYX.Log.debug("init JAConditionEditor");        var key = arguments[0];        var pair = arguments[1];        var index = arguments[3];		var tf = new Ext.form.JAConditionField({			allowBlank: pair.optional(),			dataSource:this.dataSource,			grid:this.grid,			row:index,			facade:this.facade		});				tf.on('dialogClosed', this.dialogClosed2, {scope:this, row:index, col:1, field:tf});				return new Ext.Editor(tf);    }});function findBusinessformRecord(propertyDataStore){	var recordIndex=propertyDataStore.findBy(function(record){		return record.get('gridProperties').propId=='oryx-kj_businessform';	});	if(recordIndex==-1){		Ext.Msg.alert('',ORYX.I18N.PropertyWindow.Editor.BussinessFormNotSelected);		return null;	}	return propertyDataStore.getAt(recordIndex);}function findBusinessformId(propertyDataStore){	var bfRecord=findBusinessformRecord(propertyDataStore);	if(bfRecord==null){		return null;	}	var businessformId=bfRecord.get('value');	if(businessformId==''){		Ext.Msg.alert('',ORYX.I18N.PropertyWindow.Editor.BussinessFormNotSelected);		return null;	}	return businessformId;}